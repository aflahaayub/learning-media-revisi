{"version":3,"file":"quizApp.bundle.34fbd2e76badb0e3.js","mappings":"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","sources":["webpack:///./src/questions.js","webpack:///webpack/bootstrap","webpack:///./src/quiz.js"],"sourcesContent":["// creating an array and passing the number, questions, options, and answers\r\n// import './quiz.css'\r\nexports.questions = [\r\n  {\r\n  numb: 1,\r\n  question: \"What does HTML stand for?\",\r\n  answer: \"Hyper Text Markup Language\",\r\n  options: [\r\n    \"Hyper Text Preprocessor\",\r\n    \"Hyper Text Markup Language\",\r\n    \"Hyper Text Multiple Language\",\r\n    \"Hyper Tool Multi Language\"\r\n  ]\r\n},\r\n  {\r\n  numb: 2,\r\n  question: \"What does CSS stand for?\",\r\n  answer: \"Cascading Style Sheet\",\r\n  options: [\r\n    \"Common Style Sheet\",\r\n    \"Colorful Style Sheet\",\r\n    \"Computer Style Sheet\",\r\n    \"Cascading Style Sheet\"\r\n  ]\r\n},\r\n  {\r\n  numb: 3,\r\n  question: \"What does PHP stand for?\",\r\n  answer: \"Hypertext Preprocessor\",\r\n  options: [\r\n    \"Hypertext Preprocessor\",\r\n    \"Hypertext Programming\",\r\n    \"Hypertext Preprogramming\",\r\n    \"Hometext Preprocessor\"\r\n  ]\r\n},\r\n  {\r\n  numb: 4,\r\n  question: \"What does SQL stand for?\",\r\n  answer: \"Structured Query Language\",\r\n  options: [\r\n    \"Stylish Question Language\",\r\n    \"Stylesheet Query Language\",\r\n    \"Statement Question Language\",\r\n    \"Structured Query Language\"\r\n  ]\r\n},\r\n  {\r\n  numb: 5,\r\n  question: \"What does XML stand for?\",\r\n  answer: \"eXtensible Markup Language\",\r\n  options: [\r\n    \"eXtensible Markup Language\",\r\n    \"eXecutable Multiple Language\",\r\n    \"eXTra Multi-Program Language\",\r\n    \"eXamine Multiple Language\"\r\n  ]\r\n},\r\n// you can uncomment the below codes and make duplicate as more as you want to add question\r\n// but remember you need to give the numb value serialize like 1,2,3,5,6,7,8,9.....\r\n\r\n//   {\r\n//   numb: 6,\r\n//   question: \"Your Question is Here\",\r\n//   answer: \"Correct answer of the question is here\",\r\n//   options: [\r\n//     \"Option 1\",\r\n//     \"option 2\",\r\n//     \"option 3\",\r\n//     \"option 4\"\r\n//   ]\r\n// },\r\n];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {questions} from './questions.js'\r\nimport './quiz.css'\r\n//selecting all required elements\r\nconst start_btn = document.querySelector(\".start_btn button\");\r\nconst info_box = document.querySelector(\".info_box\");\r\nconst exit_btn = info_box.querySelector(\".buttons .quit\");\r\nconst continue_btn = info_box.querySelector(\".buttons .lanjut\");\r\nconst quiz_box = document.querySelector(\".quiz_box\");\r\nconst result_box = document.querySelector(\".result_box\");\r\nconst option_list = document.querySelector(\".option_list\");\r\n// const time_line = document.querySelector(\"header .time_line\");\r\nconst timeText = document.querySelector(\".timer .time_left_txt\");\r\nconst timeCount = document.querySelector(\".timer .timer_sec\");\r\n\r\n// if startQuiz button clicked\r\nstart_btn.onclick = ()=>{\r\n    info_box.classList.add(\"activeInfo\"); //show info box\r\n}\r\n\r\n// if exitQuiz button clicked\r\nexit_btn.onclick = ()=>{\r\n    info_box.classList.remove(\"activeInfo\"); //hide info box\r\n}\r\n\r\n// if continueQuiz button clicked\r\ncontinue_btn.onclick = ()=>{\r\n    info_box.classList.remove(\"activeInfo\"); //hide info box\r\n    quiz_box.classList.add(\"activeQuiz\"); //show quiz box\r\n    showQuetions(0); //calling showQestions function\r\n    queCounter(1); //passing 1 parameter to queCounter\r\n    startTimer(25); //calling startTimer function\r\n    // startTimerLine(0); //calling startTimerLine function\r\n}\r\n\r\nlet timeValue =  25;\r\nlet que_count = 0;\r\nlet que_numb = 1;\r\nlet userScore = 0;\r\nlet counter;\r\nlet counterLine;\r\nlet widthValue = 0;\r\n\r\n// const restart_quiz = result_box.querySelector(\".buttons .restart\");\r\nconst quit_quiz = result_box.querySelector(\".buttons .quit\");\r\n\r\n// if restartQuiz button clicked\r\n// restart_quiz.onclick = ()=>{\r\n//     quiz_box.classList.add(\"activeQuiz\"); //show quiz box\r\n//     result_box.classList.remove(\"activeResult\"); //hide result box\r\n//     timeValue = 25; \r\n//     que_count = 0;\r\n//     que_numb = 1;\r\n//     userScore = 0;\r\n//     widthValue = 0;\r\n//     showQuetions(que_count); //calling showQestions function\r\n//     queCounter(que_numb); //passing que_numb value to queCounter\r\n//     clearInterval(counter); //clear counter\r\n//     clearInterval(counterLine); //clear counterLine\r\n//     startTimer(timeValue); //calling startTimer function\r\n//     startTimerLine(widthValue); //calling startTimerLine function\r\n//     timeText.textContent = \"Time Left\"; //change the text of timeText to Time Left\r\n//     next_btn.classList.remove(\"show\"); //hide the next button\r\n// }\r\n\r\n// if quitQuiz button clicked\r\nquit_quiz.onclick = ()=>{\r\n    window.location.reload(); //reload the current window\r\n}\r\n\r\nconst next_btn = document.querySelector(\"footer .next_btn\");\r\nconst bottom_ques_counter = document.querySelector(\"footer .total_que\");\r\n\r\n// if Next Que button clicked\r\nnext_btn.onclick = ()=>{\r\n    if(que_count < questions.length - 1){ //if question count is less than total question length\r\n        que_count++; //increment the que_count value\r\n        que_numb++; //increment the que_numb value\r\n        showQuetions(que_count); //calling showQestions function\r\n        queCounter(que_numb); //passing que_numb value to queCounter\r\n        clearInterval(counter); //clear counter\r\n        clearInterval(counterLine); //clear counterLine\r\n        startTimer(timeValue); //calling startTimer function\r\n        startTimerLine(widthValue); //calling startTimerLine function\r\n        timeText.textContent = \"Time Left\"; //change the timeText to Time Left\r\n        next_btn.classList.remove(\"show\"); //hide the next button\r\n    }else{\r\n        clearInterval(counter); //clear counter\r\n        clearInterval(counterLine); //clear counterLine\r\n        showResult(); //calling showResult function\r\n    }\r\n}\r\n\r\n// getting questions and options from array\r\nfunction showQuetions(index){\r\n    const que_text = document.querySelector(\".que_text\");\r\n\r\n    //creating a new span and div tag for question and option and passing the value using array index\r\n    let que_tag = '<span>'+ questions[index].numb + \". \" + questions[index].question +'</span>';\r\n    let option_tag = '<div class=\"option\"><span>'+ questions[index].options[0] +'</span></div>'\r\n    + '<div class=\"option\"><span>'+ questions[index].options[1] +'</span></div>'\r\n    + '<div class=\"option\"><span>'+ questions[index].options[2] +'</span></div>'\r\n    + '<div class=\"option\"><span>'+ questions[index].options[3] +'</span></div>';\r\n    que_text.innerHTML = que_tag; //adding new span tag inside que_tag\r\n    option_list.innerHTML = option_tag; //adding new div tag inside option_tag\r\n    \r\n    const option = option_list.querySelectorAll(\".option\");\r\n\r\n    // set onclick attribute to all available options\r\n    for(let i=0; i < option.length; i++){\r\n        console.log(option[i])\r\n        option[i].onclick=()=>{\r\n            // option[i].classList.add('clicked')\r\n            console.log(option[i].textContent)\r\n            optionSelected(option[i])\r\n        }\r\n    }\r\n}\r\n\r\nfunction clicked(answer){\r\n    console.log(answer)\r\n}\r\n\r\n// creating the new div tags which for icons\r\nlet tickIconTag = '<div class=\"icon tick\"><i class=\"fas fa-check\"></i></div>';\r\nlet crossIconTag = '<div class=\"icon cross\"><i class=\"fas fa-times\"></i></div>';\r\n\r\n//if user clicked on option\r\nfunction optionSelected(answer){\r\n    console.log(answer)\r\n    clearInterval(counter); //clear counter\r\n    clearInterval(counterLine); //clear counterLine\r\n    let userAns = answer.textContent; //getting user selected option\r\n    let correcAns = questions[que_count].answer; //getting correct answer from array\r\n    const allOptions = option_list.children.length; //getting all option items\r\n    \r\n    if(userAns == correcAns){ //if user selected option is equal to array's correct answer\r\n        userScore += 1; //upgrading score value with 1\r\n        answer.classList.add(\"correct\"); //adding green color to correct selected option\r\n        answer.insertAdjacentHTML(\"beforeend\", tickIconTag); //adding tick icon to correct selected option\r\n        console.log(\"Correct Answer\");\r\n        console.log(\"Your correct answers = \" + userScore);\r\n    }else{\r\n        answer.classList.add(\"incorrect\"); //adding red color to correct selected option\r\n        answer.insertAdjacentHTML(\"beforeend\", crossIconTag); //adding cross icon to correct selected option\r\n        console.log(\"Wrong Answer\");\r\n\r\n        for(let i=0; i < allOptions; i++){\r\n            if(option_list.children[i].textContent == correcAns){ //if there is an option which is matched to an array answer \r\n                option_list.children[i].setAttribute(\"class\", \"option correct\"); //adding green color to matched option\r\n                option_list.children[i].insertAdjacentHTML(\"beforeend\", tickIconTag); //adding tick icon to matched option\r\n                console.log(\"Auto selected correct answer.\");\r\n            }\r\n        }\r\n    }\r\n    for(let i=0; i < allOptions; i++){\r\n        option_list.children[i].classList.add(\"disabled\"); //once user select an option then disabled all options\r\n    }\r\n    next_btn.classList.add(\"show\"); //show the next button if user selected any option\r\n}\r\n\r\nfunction showResult(){\r\n    info_box.classList.remove(\"activeInfo\"); //hide info box\r\n    quiz_box.classList.remove(\"activeQuiz\"); //hide quiz box\r\n    result_box.classList.add(\"activeResult\"); //show result box\r\n    const scoreText = result_box.querySelector(\".score_text\");\r\n    if (userScore > 3){ // if user scored more than 3\r\n        //creating a new span tag and passing the user score number and total question number\r\n        let scoreTag = `<span>Selamat, kamu berhasil menjawab ${userScore} dari ${questions.length}</span>`;\r\n        scoreText.innerHTML = scoreTag;  //adding new span tag inside score_Text\r\n    }\r\n    else if(userScore > 1){ // if user scored more than 1\r\n        let scoreTag = `<span>Jawaban yang benar ada ${userScore} dari ${questions.length}. </span>`;\r\n        scoreText.innerHTML = scoreTag;\r\n    }\r\n    else{ // if user scored less than 1\r\n        let scoreTag = `<span> Jawaban yang benar hanya ${userScore} dari ${questions.length}. `;\r\n        scoreText.innerHTML = scoreTag;\r\n    }\r\n    const total = userScore/questions.length * 100\r\n    result_box.querySelector('.total_score').innerHTML = `<p>${total} </p>`\r\n}\r\n\r\nfunction startTimer(time){\r\n    counter = setInterval(timer, 1000);\r\n    function timer(){\r\n        timeCount.textContent = time; //changing the value of timeCount with time value\r\n        time--; //decrement the time value\r\n        if(time < 9){ //if timer is less than 9\r\n            let addZero = timeCount.textContent; \r\n            timeCount.textContent = \"0\" + addZero; //add a 0 before time value\r\n        }\r\n        if(time < 0){ //if timer is less than 0\r\n            clearInterval(counter); //clear counter\r\n            timeText.textContent = \"Time Off\"; //change the time text to time off\r\n            const allOptions = option_list.children.length; //getting all option items\r\n            let correcAns = questions[que_count].answer; //getting correct answer from array\r\n            for(let i=0; i < allOptions; i++){\r\n                if(option_list.children[i].textContent == correcAns){ //if there is an option which is matched to an array answer\r\n                    option_list.children[i].setAttribute(\"class\", \"option correct\"); //adding green color to matched option\r\n                    option_list.children[i].insertAdjacentHTML(\"beforeend\", tickIconTag); //adding tick icon to matched option\r\n                    console.log(\"Time Off: Auto selected correct answer.\");\r\n                }\r\n            }\r\n            for(let i=0; i < allOptions; i++){\r\n                option_list.children[i].classList.add(\"disabled\"); //once user select an option then disabled all options\r\n            }\r\n            next_btn.classList.add(\"show\"); //show the next button if user selected any option\r\n        }\r\n    }\r\n}\r\n\r\n// function startTimerLine(time){\r\n//     counterLine = setInterval(timer, 29);\r\n//     function timer(){\r\n//         time += 1; //upgrading time value with 1\r\n//         time_line.style.width = time + \"px\"; //increasing width of time_line with px by time value\r\n//         if(time > 549){ //if time value is greater than 549\r\n//             clearInterval(counterLine); //clear counterLine\r\n//         }\r\n//     }\r\n// }\r\n\r\nfunction queCounter(index){\r\n    //creating a new span tag and passing the question number and total question\r\n    let totalQueCounTag = '<span><p>'+ index +'</p> of <p>'+ questions.length +'</p> Questions</span>';\r\n    bottom_ques_counter.innerHTML = totalQueCounTag;  //adding new span tag inside bottom_ques_counter\r\n}"],"names":["exports","numb","question","answer","options","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","start_btn","document","querySelector","info_box","exit_btn","continue_btn","quiz_box","result_box","option_list","timeText","timeCount","onclick","classList","add","remove","showQuetions","queCounter","startTimer","counter","counterLine","que_count","que_numb","userScore","window","location","reload","next_btn","bottom_ques_counter","index","que_text","que_tag","questions","option_tag","innerHTML","option","querySelectorAll","i","length","console","log","textContent","optionSelected","clearInterval","startTimerLine","scoreText","scoreTag","total","showResult","tickIconTag","userAns","correcAns","allOptions","children","insertAdjacentHTML","setAttribute","time","setInterval","addZero","totalQueCounTag"],"sourceRoot":""}